#!/usr/bin/env node
"use strict";

require("./blocked-io");

var _commander = _interopRequireDefault(require("commander"));

var _leven = _interopRequireDefault(require("leven"));

var _emitter = _interopRequireDefault(require("./emitter"));

var _config = _interopRequireDefault(require("./config"));

var _client = _interopRequireDefault(require("./client"));

var _response = _interopRequireDefault(require("./response"));

var _request = _interopRequireDefault(require("./request"));

var _validator = _interopRequireDefault(require("./validator"));

var _package = _interopRequireDefault(require("../package.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var emitter = new _emitter.default();
var config = new _config.default(emitter);
var client = new _client.default(config, emitter);
var validator = new _validator.default(emitter);
var response = new _response.default(validator, emitter);
var request = new _request.default(config, client, response);

var suggestCommands = function suggestCommands(cmdName) {
  var availableCommands = _commander.default.commands.map(function (cmd) {
    return cmd._name;
  });

  var suggestion = availableCommands.find(function (cmd) {
    return (0, _leven.default)(cmd, cmdName) < cmd.length * 0.4;
  });

  if (suggestion) {
    emitter.log("\n Did you mean ".concat(suggestion, "?\n"));
  }
};

_commander.default.version(_package.default.version).option('-q, --quiet', 'Disables all logging except for errors', emitter.quiet.bind(emitter)).option('-v, --verbose', 'Enables more rich output for certain commands', emitter.verbose.bind(emitter)).option('-d, --debug', 'Enables Nexmo library to output debug statements', emitter.debug.bind(emitter)); // account level


_commander.default.command('setup <api_key> <api_secret>').description('Set up your API credentials').alias('s').option('-l, --local', 'write config to current folder (./.nexmo) instead of the user root (~/.nexmo)').action(request.accountSetup.bind(request));

_commander.default.command('account').description('Your account details').alias('a').action(request.accountInfo.bind(request));

_commander.default.command('account:key').description('Your API key').action(request.accountKey.bind(request));

_commander.default.command('account:secret').description('Your API secret').action(request.accountSecret.bind(request));

_commander.default.command('balance').description('Current account balance').alias('b').action(request.accountBalance.bind(request)); // Number List


_commander.default.command('numbers:list').description('List of numbers assigned to the account').option('--page <page>', 'the page of results to return', /^\d*$/i, 1).option('--size <size>', 'the amount of results to return', /^\d*$/i, 100).option('--pattern <pattern>', 'to be matched in number (use * to match end or start of number)').alias('nl').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo numbers:list --page 2');
  emitter.log('    $ nexmo numbers:list --page 2 --size 20');
  emitter.log('    $ nexmo numbers:list --pattern 445*');
  emitter.log('    $ nexmo numbers:list --pattern *445');
  emitter.log(' ');
}).action(request.numbersList.bind(request));

_commander.default.command('number:list', null, {
  noHelp: true
}).alias('numbers').description('List of numbers assigned to the account').option('--page <page>', 'the page of results to return', /^\d*$/i, 1).option('--size <size>', 'the amount of results to return', /^\d*$/i, 100).option('--pattern <pattern>', 'to be matched in number (use * to match end or start of number)').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo number:list --page 2');
  emitter.log('    $ nexmo number:list --page 2 --size 20');
  emitter.log('    $ nexmo number:list --pattern 445*');
  emitter.log('    $ nexmo number:list --pattern *445');
  emitter.log(' ');
}).action(request.numbersList.bind(request)); // Number Buy


_commander.default.command('number:buy [number_pattern]').description('Buy a number to use for voice or SMS. If a --country_code is provided then the number_pattern is used to search for a number in the given country.').alias('nb').option('-c, --country_code [country_code]', 'the country code').option('--confirm', 'skip confirmation step and directly buy the number').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo number:buy 445555555555');
  emitter.log('    $ nexmo number:buy 31555555555');
  emitter.log('    $ nexmo number:buy 17136738555');
  emitter.log(' ');
  emitter.log('  Optionally directly search and buy a number:');
  emitter.log(' ');
  emitter.log('    $ nexmo number:buy 445* -c GB');
  emitter.log('    $ nexmo number:buy -c US');
  emitter.log(' ');
}).action(request.numberBuy.bind(request));

_commander.default.command('numbers:buy [number_pattern]').description('Buy a number to use for voice or SMS. If a --country_code is provided then the number_pattern is used to search for a number in the given country.').option('-c, --country_code [country_code]', 'the country code').option('--confirm', 'skip confirmation step and directly buy the number').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo numbers:buy 445555555555');
  emitter.log('    $ nexmo numbers:buy 31555555555');
  emitter.log('    $ nexmo numbers:buy 17136738555');
  emitter.log(' ');
  emitter.log('  Optionally directly search and buy a number:');
  emitter.log(' ');
  emitter.log('    $ nexmo numbers:buy 445* -c GB');
  emitter.log('    $ nexmo numbers:buy -c US');
  emitter.log(' ');
}).action(request.numberBuy.bind(request)); // Number Search


_commander.default.command('number:search <country_code>').description('Search for a number to buy').alias('ns').option('--pattern <pattern>', 'to be matched in number (use * to match end or start of number)').option('--voice', 'search for voice enabled numbers').option('--sms', 'search for SMS enabled numbers').option('--page <page>', 'the page of results to return', /^\d*$/i, 1).option('--size <size>', 'the amount of results to return', /^\d*$/i, 100).on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo number:search GB --pattern 078*');
  emitter.log('    $ nexmo number:search NL --sms --pattern 123');
  emitter.log('    $ nexmo number:search US --pattern *007 --verbose');
  emitter.log(' ');
}).action(request.numberSearch.bind(request));

_commander.default.command('numbers:search <country_code>', null, {
  noHelp: true
}).description('Search for a number to buy').option('--pattern <pattern>', 'to be matched in number (use * to match end or start of number)').option('--voice', 'search for voice enabled numbers').option('--sms', 'search for SMS enabled numbers').option('--page <page>', 'the page of results to return', /^\d*$/i, 1).option('--size <size>', 'the amount of results to return', /^\d*$/i, 100).on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo number:search GB --pattern 078*');
  emitter.log('    $ nexmo number:search NL --sms --pattern 123');
  emitter.log('    $ nexmo number:search US --pattern *007 --verbose');
  emitter.log(' ');
}).action(request.numberSearch.bind(request)); // Number Cancel


_commander.default.command('number:cancel <number>').description('Cancel a number you own').option('--confirm', 'skip confirmation step and directly cancel the number').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').alias('nc').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo number:cancel 445555555555');
  emitter.log('    $ nexmo number:cancel 31555555555');
  emitter.log('    $ nexmo number:cancel 17136738555');
  emitter.log(' ');
}).action(request.numberCancel.bind(request));

_commander.default.command('numbers:cancel <number>', null, {
  noHelp: true
}).description('Cancel a number you own').option('--confirm', 'skip confirmation step and directly cancel the number').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo number:cancel 445555555555');
  emitter.log('    $ nexmo number:cancel 31555555555');
  emitter.log('    $ nexmo number:cancel 17136738555');
  emitter.log(' ');
}).action(request.numberCancel.bind(request));

_commander.default.command('numbers:update <number>').description('Configure the handling of a number').alias('nu').option('--mo_http_url <mo_http_url>', 'used for SMS callbacks').option('--voice_callback_type <voice_callback_type>', 'the voice callback type (any of app/sip/tel/vxml)').option('--voice_callback_value <voice_callback_value>', 'the voice callback value based on the voice_callback_type').option('--voice_status_callback <voice_status_callback>', 'a URL to which Nexmo will send a request when the call ends to notify your application').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo numbers:update 445555555555 --voice_callback_type app --voice_callback_value asdasdas-asdd-2344-2344-asdasdasd345');
  emitter.log(' ');
}).action(request.numberUpdate.bind(request));

_commander.default.command('number:update <number>', null, {
  noHelp: true
}).description('Configure the handling of a number').option('--mo_http_url <mo_http_url>', 'used for SMS callbacks').option('--voice_callback_type <voice_callback_type>', 'the voice callback type (any of app/sip/tel/vxml)').option('--voice_callback_value <voice_callback_value>', 'the voice callback value based on the voice_callback_type').option('--voice_status_callback <voice_status_callback>', 'a URL to which Nexmo will send a request when the call ends to notify your application').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo number:update 445555555555 --voice_callback_type app --voice_callback_value asdasdas-asdd-2344-2344-asdasdasd345');
  emitter.log(' ');
}).action(request.numberUpdate.bind(request)); // Application List


_commander.default.command('apps:list').description('List your Nexmo Applications').option('--page <page>', 'the page of results to return', /^\d*$/i, 1).option('--size <size>', 'the amount of results to return', /^\d*$/i, 100).alias('al').description('List of numbers assigned to the account').action(request.applicationsList.bind(request));

_commander.default.command('apps', null, {
  noHelp: true
}).description('List your Nexmo Applications').option('--page <page>', 'the page of results to return', /^\d*$/i, 1).option('--size <size>', 'the amount of results to return', /^\d*$/i, 100).action(request.applicationsList.bind(request));

_commander.default.command('app:list', null, {
  noHelp: true
}).description('List your Nexmo Applications').option('--page <page>', 'the page of results to return', /^\d*$/i, 1).option('--size <size>', 'the amount of results to return', /^\d*$/i, 100).action(request.applicationsList.bind(request)); // Application Create


_commander.default.command('app:create <name> <answer_url> <event_url>').description('Create a new Nexmo Application').alias('ac').option('--type <type>', 'the type of application', /^(voice)$/i, 'voice').option('--answer_method <answer_method>', 'the HTTP method to use for the answer_url (defaults to GET)').option('--event_method <event_method>', 'the HTTP method to use for the event_url (defaults to POST)').option('--keyfile <keyfile>', 'the file to save your private key to').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo app:create "Test Application 1" http://example.com http://example.com --keyfile private.key');
  emitter.log(' ');
}).action(request.applicationCreate.bind(request));

_commander.default.command('apps:create <name> <answer_url> <event_url>', null, {
  noHelp: true
}).description('Create a new Nexmo Application').option('--type <type>', 'the type of application', /^(voice)$/i, 'voice').option('--answer_method <answer_method>', 'the HTTP method to use for the answer_url (defaults to GET)').option('--event_method <event_method>', 'the HTTP method to use for the event_url (defaults to GET)').option('--keyfile <keyfile>', 'the file to save your private key to').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo app:create "Test Application 1" http://example.com http://example.com --keyfile private.key');
  emitter.log(' ');
}).action(request.applicationCreate.bind(request)); // Application Show


_commander.default.command('app:show <app_id>').description('Show details for a Nexmo Application').alias('as').action(request.applicationShow.bind(request));

_commander.default.command('app <app_id>', null, {
  noHelp: true
}).description('Show details for a Nexmo Application').action(request.applicationShow.bind(request));

_commander.default.command('apps:show <app_id>', null, {
  noHelp: true
}).description('Show details for a Nexmo Application').action(request.applicationShow.bind(request)); // Application Update


_commander.default.command('app:update <app_id> <name> <answer_url> <event_url>').description('Update a Nexmo Application').alias('au').option('--type <type>', 'the type of application', /^(voice)$/i, 'voice').option('--answer_method <answer_method>', 'the HTTP method to use for the answer_url (defaults to GET)').option('--event_method <event_method>', 'the HTTP method to use for the event_url (defaults to GET)').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo app:update asdasdas-asdd-2344-2344-asdasdasd345 "Test Application 1" http://example.com http://example.com');
  emitter.log(' ');
}).action(request.applicationUpdate.bind(request));

_commander.default.command('apps:update <app_id> <name> <answer_url> <event_url>', null, {
  noHelp: true
}).description('Update a Nexmo Application').option('--type <type>', 'the type of application', /^(voice)$/i, 'voice').option('--answer_method <answer_method>', 'the HTTP method to use for the answer_url (defaults to GET)').option('--event_method <event_method>', 'the HTTP method to use for the event_url (defaults to GET)').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo app:update asdasdas-asdd-2344-2344-asdasdasd345 "Test Application 1" http://example.com http://example.com');
  emitter.log(' ');
}).action(request.applicationUpdate.bind(request)); // Application Delete


_commander.default.command('app:delete <app_id>').description('Delete a Nexmo Application').alias('ad').option('--confirm', 'skip confirmation step and directly delete the app').action(request.applicationDelete.bind(request));

_commander.default.command('apps:delete <app_id>', null, {
  noHelp: true
}).description('Delete a Nexmo Application').option('--confirm', 'skip confirmation step and directly delete the app').action(request.applicationDelete.bind(request)); // App numbers


_commander.default.command('app:numbers <app_id>').description('Show numbers associated to a Nexmo Application').option('--page <page>', 'the page of results to return', /^\d*$/i, 1).option('--size <size>', 'the amount of results to return', /^\d*$/i, 100).alias('an').action(request.applicationNumbers.bind(request));

_commander.default.command('apps:numbers <app_id>', null, {
  noHelp: true
}).description('Show numbers associated to a Nexmo Application').option('--page <page>', 'the page of results to return', /^\d*$/i, 1).option('--size <size>', 'the amount of results to return', /^\d*$/i, 100).action(request.applicationNumbers.bind(request)); // Create a link


_commander.default.command('link:app <number> <app_id>').alias('la').description('Link a number to an application').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo link:app 445555555555 asdasdas-asdd-2344-2344-asdasdasd345');
  emitter.log(' ');
}).action(request.linkApp.bind(request));

_commander.default.command('link:sms <number> <callback_url>').alias('lsms').description('Link a number to an sms callback URL').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo link:sms 445555555555 http://example.com/callback');
  emitter.log(' ');
}).action(request.linkSms.bind(request));

_commander.default.command('link:vxml <number> <callback_url>').alias('lv').description('Link a number to a vxml callback URL').option('--voice_status_callback <voice_status_callback>', 'a URL to which Nexmo will send a request when the call ends to notify your application.').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo link:vxml 445555555555 http://example.com/callback');
  emitter.log(' ');
}).action(request.linkVxml.bind(request));

_commander.default.command('link:tel <number> <other_number>').alias('lt').description('Link a number to another number').option('--voice_status_callback <voice_status_callback>', 'a URL to which Nexmo will send a request when the call ends to notify your application.').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo link:tel 445555555555 1275555555');
  emitter.log(' ');
}).action(request.linkTel.bind(request));

_commander.default.command('link:sip <number> <sip_uri>').alias('lsip').description('Link a number to SIP URI').option('--voice_status_callback <voice_status_callback>', 'a URL to which Nexmo will send a request when the call ends to notify your application.').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo link:sip 445555555555 sip:1275555555@sip.example.com');
  emitter.log(' ');
}).action(request.linkSip.bind(request)); // Delete a link


_commander.default.command('unlink:app <number>').description('Unlink a number from an application').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo unlink:app 4455555555555');
  emitter.log(' ');
}).action(request.unlinkApp.bind(request));

_commander.default.command('unlink:sms <number>').description('Unlink a number from a sms callback URL').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo unlink:sms 445555555555');
  emitter.log(' ');
}).action(request.unlinkSms.bind(request));

_commander.default.command('unlink:vxml <number>').description('Unlink a number from a vxml callback URL').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo unlink:vxml 445555555555');
  emitter.log(' ');
}).action(request.unlinkVxml.bind(request));

_commander.default.command('unlink:tel <number>').description('Unlink a number from another number').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo unlink:tel 445555555555 ');
  emitter.log(' ');
}).action(request.unlinkTel.bind(request));

_commander.default.command('unlink:sip <number>').description('Unlink a number from a SIP URI').option('-c, --country_code [country_code]', 'manually provide the country code, overriding a dynamic lookup').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo unlink:sip 445555555555');
  emitter.log(' ');
}).action(request.unlinkSip.bind(request)); // Insight


_commander.default.command('insight:basic <number>').alias('ib').description('Get details about this number').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo insight:basic 445555555555');
  emitter.log(' ');
}).action(request.insightBasic.bind(request));

_commander.default.command('insight <number>', null, {
  noHelp: true
}).description('Get details about this number').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo insight:basic 445555555555');
  emitter.log(' ');
}).action(request.insightBasic.bind(request));

_commander.default.command('insight:standard <number>').alias('is').option('--confirm', 'skip fee confirmation step and directly get the information').description('Get more details about this number like the current carrier. This operation will incur a fee.').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo insight:standard 445555555555');
  emitter.log(' ');
}).action(request.insightStandard.bind(request));

_commander.default.command('insight:advanced <number>').alias('ia').option('--confirm', 'skip fee confirmation step and directly get the information').description('Get more details about this number like the roaming status and current country of the phone. This operation will incur a fee.').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo insight:advanced 445555555555');
  emitter.log(' ');
}).action(request.insightAdvanced.bind(request));

_commander.default.command('price:sms <number>').alias('ps').description('Get the cost of sending an outbound text to a number.').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo price:sms 445555555555');
  emitter.log(' ');
}).action(request.priceSms.bind(request));

_commander.default.command('price:voice <number>').alias('pv').description('Get the the cost of making an outbound call to a number.').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo price:voice 445555555555');
  emitter.log(' ');
}).action(request.priceVoice.bind(request));

_commander.default.command('price:country <country_code>').alias('pc').description('Get the the cost of sending an outbound text message to the given country ID.').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo price:country GB');
  emitter.log(' ');
}).action(request.priceCountry.bind(request)); // sending sms


_commander.default.command('sms <to> <text...>').option('--confirm', 'skip confirmation step and directly send the message').option('-f, --from <from...>', 'the number or name to send the SMS message from (defaults to "Nexmo CLI")', 'Nexmo CLI').description('Send an SMS').action(request.sendSms.bind(request));

_commander.default.command('jwt:generate <private_key> [claims...]').description('Generate a JWT (JSON Web Token)').on('--help', function () {
  emitter.log('  Examples:');
  emitter.log(' ');
  emitter.log('    $ nexmo jwt:generate path/to/private.key');
  emitter.log(' ');
  emitter.log('    $ nexmo jwt:generate path/to/private.key subject=username iat=1475861732');
  emitter.log(' ');
  emitter.log('    $ nexmo jwt:generate path/to/private.key subject=username iat=1475861732 application_id=asdasdas-asdd-2344-2344-asdasdasd345');
  emitter.log(' ');
}).action(request.generateJwt.bind(request)); // catch unknown commands


_commander.default.command('*', null, {
  noHelp: true
}).action(function (cmd) {
  _commander.default.outputHelp();

  suggestCommands(cmd);
});

_commander.default.parse(process.argv); // show help on no command


if (!_commander.default.args.length) _commander.default.help();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,